<?php
/**
 * @file
 * Special functionality for the Laurelstein Decathlon
 */

/**
 * Implements hook_form_alter
 *
 * Prevent deletion of taxonomy term with existing records (namely, a player)
 *
 * Autofill event on add bonus form
 */
function decathlon_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'taxonomy_form_term') {

    // overrides
    if (is_array($form['#term']) && $form['#term']['tid'] == 62) {
      $results = db_query("SELECT field, value from {decathlon_taxonomy_value} WHERE event = :event AND term = :tid",
                 array(
                   ':event' => decathlon_get_event(),
                   ':tid' => $form['#term']['tid'],
                 ))->fetchAllKeyed();

      if (!empty($results)) {
        $form['field_min_to_score']['und'][0]['value']['#default_value'] = $results['field_min_to_score'];
      }

      $form['#submit'][] = 'decathlon_taxonomy_submit_override';
    }

    // disable delete for term (players, games, or honors) if there are scores or honors rows
    if (is_array($form['#term'])) {
      $vocab = $form['#term']['vocabulary_machine_name'];
      if (in_array($vocab, array('players', 'games', 'bonus'))) { // honors labelled as bonus in taxonomy

        $count = 0;
        switch ($vocab) {
          case 'players':
            $scores = db_query("SELECT COUNT(pid) from {decathlon_scores} WHERE pid = :tid", array(':tid' => $form['#term']['tid']))->fetchField();
            $honors = db_query("SELECT COUNT(pid) from {decathlon_honors} WHERE pid = :tid", array(':tid' => $form['#term']['tid']))->fetchField();
            $count = $scores + $honors;
            break;
          case 'games':
            $count = db_query("SELECT COUNT(gid) from {decathlon_contests} WHERE gid = :tid", array(':tid' => $form['#term']['tid']))->fetchField();
            break;
          case 'bonus':
            $count = db_query("SELECT COUNT(honor) from {decathlon_honors} WHERE honor = :tid", array(':tid' => $form['#term']['tid']))->fetchField();
            break;
        }
        
        if ($count > 0) {
          // disable delete
          $form['actions']['delete']['#disabled'] = TRUE;
          // add a message
          $form['footnote'] = array(
            '#type' => 'item',
            '#markup' => t('* This term has @count database records and cannot be deleted.', array('@count' => $count)),
            '#weight' => 500,
          );
        }
      }
    }
  }

  // autofill event on node add for bonus
  if ($form_id == 'bonus_node_form') {
    $form['field_decathlon']['und']['#default_value'][0] = decathlon_get_event();;
  }
}


/**
 * Submit handler to save value to decathlon_taxonomy_value
 */
function decathlon_taxonomy_submit_override($form, &$form_state) {
  db_merge('decathlon_taxonomy_value')
    ->key(array(
        'event' => decathlon_get_event(),
        'term' => $form['#term']['tid'],
        'field' => 'field_min_to_score',
      ))
    ->fields(array(
        'value' => $form_state['values']['field_min_to_score']['und'][0]['value'],
      ))
    ->execute();
}

/**
 *
 */
function decathlon_taxonomy_get_override($tid, $field) {
  $value = db_query("SELECT value from {decathlon_taxonomy_value} WHERE event = :event AND term = :tid AND field = :field",
           array(
             ':event' => decathlon_get_event(),
             ':tid' => $tid,
             ':field' => $field,
           ))->fetchField();
  if (empty($value)) {
    $term = taxonomy_term_load($tid);
    $value = $term->{$field}['und'][0]['value'];
  }
  return $value;
}

/**
 *
 */
function decathlon_views_pre_render(&$view) {
  $tid = 62;
  $field = 'field_min_to_score';
  foreach ($view->result as $index => $row) {
    if (isset($row->tid) && $row->tid == $tid) {
      $view->result[$index]->field_field_min_to_score[0]['rendered']['#markup'] = decathlon_taxonomy_get_override($tid, $field);
    }
  }
}

/**
 *  Implements hook_libraries_info
 *
 *  Add jquery libraries
 */
function decathlon_libraries_info() {

  $libraries['easy-ticker'] = array(
    'name' => 'Easy Ticker',
    'version callback' => 'decathlon_version_callback',
    'files' => array(
      'js' => array('jquery.easy-ticker.min.js'),
    ),
  );

  $libraries['scrollbox'] = array(
    'name' => 'Scrollbox',
    'version callback' => 'decathlon_version_callback',
    'files' => array(
      'js' => array('jquery.scrollbox.min.js'),
    ),
  );

  return $libraries;
}

/**
 * Callback for hook_libraries_info
 */
function decathlon_version_callback() {
  return TRUE;
}

/**
 * Implements hook_init
 *
 * Set a variable for current event
 */
function decathlon_init() {
  if (!isset($_SESSION['decathlon_event_id'])) {
    decathlon_set_event(decathlon_get_current_event());
  }
}

/**
 * Set variable for current event, clear caches, reset standings cache
 */
function decathlon_set_event($event) {
  $_SESSION['decathlon_event_id'] = $event;
}

/**
 * Return variable for event
 */
function decathlon_get_event() {
  $event = $_SESSION['decathlon_event_id'];
  if ($event == NULL) {
    $event = decathlon_get_current_event();
    decathlon_set_event($event);
  }
  return $event;
}

/**
 * Return taxonomy term ID for latest event as default
 */
function decathlon_get_current_event() {
  $record = views_get_view_result('event', 'panel_pane_1');
  return $record[0]->tid;
}

/**
 * Change event from link
 */
function decathlon_change_event($event) {
  decathlon_set_event($event);
  drupal_goto();
}

/**
 * Implements hook_menu()
 */
function decathlon_menu() {
  $items = array();

  $items['decathlon/change-event/%'] = array(
    'page callback' => 'decathlon_change_event',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Register ctools plugins
 *
 * Find these under decathlon/plugins
 */
function decathlon_ctools_plugin_directory($owner, $plugin) {
  if ($owner == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
}


